from time import sleep_ms
import struct

COLOR_MODE = 0x3A
SWRESET = 0x01
SLPOUT = 0x11
DISPON = 0x29
CASET = 0x2A
PASET = 0x2B
RAMWR = 0x2C
MADCTL = 0x36

ROTATIONS = [
    (0x48, 240, 320),
    (0x28, 320, 240),
    (0x88, 240, 320),
    (0xE8, 320, 240)
]

def color565(r, g, b):
    return (r & 0xF8) << 8 | (g & 0xFC) << 3 | b >> 3

class ILI9341:
    def __init__(self, spi, cs, dc, rst, w=240, h=320, rot=0):
        self.spi = spi
        self.cs = cs
        self.dc = dc
        self.rst = rst
        self.w = w
        self.h = h
        self.rot = rot

        for pin in (cs, dc, rst):
            pin.init(pin.OUT, value=1)

        self.reset()
        self.init_display()

    def reset(self):
        self.rst(1)
        sleep_ms(50)
        self.rst(0)
        sleep_ms(50)
        self.rst(1)
        sleep_ms(150)

    def write_cmd(self, cmd):
        self.dc(0)
        self.cs(0)
        self.spi.write(bytearray([cmd]))
        self.cs(1)

    def write_data(self, data):
        self.dc(1)
        self.cs(0)
        self.spi.write(bytearray([data]) if isinstance(data, int) else data)
        self.cs(1)

    def init_display(self):
        self.write_cmd(SWRESET)
        sleep_ms(150)
        self.write_cmd(SLPOUT)
        sleep_ms(500)
        self.write_cmd(COLOR_MODE)
        self.write_data(0x55)  # 16-bit color
        self.set_rotation(self.rot)
        self.write_cmd(DISPON)
        sleep_ms(100)
        
    def set_rotation(self, rot):
        rotation, width, height = ROTATIONS[rot % 4]
        self.write_cmd(MADCTL)
        self.write_data(rotation)
        self.w = width
        self.h = height

    def set_window(self, x0, y0, x1, y1):
        self.write_cmd(CASET)
        self.write_data(struct.pack('>HH', x0, x1))
        self.write_cmd(PASET)
        self.write_data(struct.pack('>HH', y0, y1))
        self.write_cmd(RAMWR)

    def draw_pixel(self, x, y, color):
        self.set_window(x, y, x, y)
        self.write_data(struct.pack('>H', color))

    def fill(self, color):
        self.set_window(0, 0, self.w - 1, self.h - 1)
        self.dc(1)
        self.cs(0)
        color_bytes = struct.pack('>H', color) * 64
        for _ in range(self.w * self.h // 64):
            self.spi.write(color_bytes)
        self.cs(1)

    def text(self, string, x, y, color):
        for i, char in enumerate(string):
            self.draw_char(x + i * 8, y, char, color)

    def draw_char(self, x, y, char, color):
        pixels = FONT.get(char, FONT.get('?'))
        if pixels:
            for col, line in enumerate(pixels):#
                for row in range(8):  # 8 Pixel hoch
                    if line & (1 << row):
                        self.draw_pixel(x + col, y + row, color)


    
    
FONT = {
    'A': [0x7E, 0x09, 0x09, 0x7E, 0x00, 0x00, 0x00, 0x00],
    'B': [0x7F, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00, 0x00],
    'C': [0x3E, 0x41, 0x41, 0x22, 0x00, 0x00, 0x00, 0x00],
    'D': [0x7F, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x00, 0x00],
    'E': [0x7F, 0x49, 0x49, 0x41, 0x00, 0x00, 0x00, 0x00],
    'F': [0x7F, 0x09, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00],
    'G': [0x3E, 0x41, 0x51, 0x32, 0x00, 0x00, 0x00, 0x00],
    'H': [0x7F, 0x08, 0x08, 0x7F, 0x00, 0x00, 0x00, 0x00],
    'I': [0x00, 0x41, 0x7F, 0x41, 0x00, 0x00, 0x00, 0x00],
    'J': [0x20, 0x40, 0x41, 0x3F, 0x00, 0x00, 0x00, 0x00],
    'K': [0x7F, 0x08, 0x14, 0x63, 0x00, 0x00, 0x00, 0x00],
    'L': [0x7F, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00],
    'M': [0x7F, 0x02, 0x04, 0x02, 0x7F, 0x00, 0x00, 0x00],
    'N': [0x7F, 0x06, 0x18, 0x7F, 0x00, 0x00, 0x00, 0x00],
    'O': [0x3E, 0x41, 0x41, 0x3E, 0x00, 0x00, 0x00, 0x00],
    'P': [0x7F, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00],
    'Q': [0x3E, 0x41, 0x61, 0x7E, 0x00, 0x00, 0x00, 0x00],
    'R': [0x7F, 0x09, 0x19, 0x66, 0x00, 0x00, 0x00, 0x00],
    'S': [0x46, 0x49, 0x49, 0x31, 0x00, 0x00, 0x00, 0x00],
    'T': [0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00, 0x00],
    'U': [0x3F, 0x40, 0x40, 0x3F, 0x00, 0x00, 0x00, 0x00],
    'V': [0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00, 0x00],
    'W': [0x7F, 0x20, 0x10, 0x20, 0x7F, 0x00, 0x00, 0x00],
    'X': [0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00, 0x00],
    'Y': [0x03, 0x04, 0x78, 0x04, 0x03, 0x00, 0x00, 0x00],
    'Z': [0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00, 0x00],
    'a': [0x20, 0x54, 0x54, 0x78, 0x00, 0x00, 0x00, 0x00],
    'b': [0x7F, 0x48, 0x48, 0x30, 0x00, 0x00, 0x00, 0x00],
    'c': [0x38, 0x44, 0x44, 0x28, 0x00, 0x00, 0x00, 0x00],
    'd': [0x30, 0x48, 0x48, 0x7F, 0x00, 0x00, 0x00, 0x00],
    'e': [0x38, 0x54, 0x54, 0x18, 0x00, 0x00, 0x00, 0x00],
    'f': [0x08, 0x7E, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00],
    'g': [0x18, 0xA4, 0xA4, 0x7C, 0x00, 0x00, 0x00, 0x00],
    'h': [0x7F, 0x08, 0x08, 0x70, 0x00, 0x00, 0x00, 0x00],
    'i': [0x00, 0x48, 0x7A, 0x40, 0x00, 0x00, 0x00, 0x00],
    'j': [0x40, 0x80, 0x84, 0x7A, 0x00, 0x00, 0x00, 0x00],
    'k': [0x7F, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00],
    'l': [0x00, 0x41, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00],
    'm': [0x7C, 0x04, 0x38, 0x04, 0x78, 0x00, 0x00, 0x00],
    'n': [0x7C, 0x08, 0x04, 0x78, 0x00, 0x00, 0x00, 0x00],
    'o': [0x38, 0x44, 0x44, 0x38, 0x00, 0x00, 0x00, 0x00],
    'p': [0xFC, 0x24, 0x24, 0x18, 0x00, 0x00, 0x00, 0x00],
    'q': [0x18, 0x24, 0x24, 0xFC, 0x00, 0x00, 0x00, 0x00],
    'r': [0x7C, 0x08, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00],
    's': [0x48, 0x54, 0x54, 0x24, 0x00, 0x00, 0x00, 0x00],
    't': [0x04, 0x3F, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00],
    'u': [0x3C, 0x40, 0x20, 0x7C, 0x00, 0x00, 0x00, 0x00],
    'v': [0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00, 0x00, 0x00],
    'w': [0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00, 0x00, 0x00],
    'x': [0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00],
    'y': [0x1C, 0xA0, 0xA0, 0x7C, 0x00, 0x00, 0x00, 0x00],
    'z': [0x44, 0x64, 0x54, 0x4C, 0x44, 0x00, 0x00, 0x00],
    '0': [0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00, 0x00],
    '1': [0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00, 0x00],
    '2': [0x42, 0x61, 0x51, 0x49, 0x46, 0x00, 0x00, 0x00],
    '3': [0x21, 0x41, 0x45, 0x4B, 0x31, 0x00, 0x00, 0x00],
    '4': [0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00, 0x00],
    '5': [0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00, 0x00],
    '6': [0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00, 0x00],
    '7': [0x01, 0x71, 0x09, 0x05, 0x03, 0x00, 0x00, 0x00],
    '8': [0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, 0x00],
    '9': [0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00, 0x00],
    ' ': [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    ':': [0x00, 0x36, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00],
    '.': [0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
    ',': [0x00, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00],
    '-': [0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00],
    '%': [0x62, 0x64, 0x08, 0x13, 0x23, 0x00, 0x00, 0x00],
    '!': [0x00, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    '?': [0x02, 0x51, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00],
    'Â°': [0x06, 0x09, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00],
    '?': [0x02, 0x51, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00]
}


